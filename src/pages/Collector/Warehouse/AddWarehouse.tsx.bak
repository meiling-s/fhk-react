import { FunctionComponent, useCallback, useState, useEffect, Key } from 'react'
import { useNavigate } from 'react-router-dom'
import RightOverlayForm from '../../../components/RightOverlayForm'
import TextField from '@mui/material/TextField'
import { Grid, FormHelperText } from '@mui/material'
import FormControl from '@mui/material/FormControl'
import OutlinedInput from '@mui/material/OutlinedInput'
import InputAdornment from '@mui/material/InputAdornment'
import Select, { SelectChangeEvent } from '@mui/material/Select'
import MenuItem from '@mui/material/MenuItem'
import Switcher from '../../../components/FormComponents/CustomSwitch'
import LabelField from '../../../components/FormComponents/CustomField'
import { ADD_CIRCLE_ICON, REMOVE_CIRCLE_ICON } from '../../../themes/icons'
import { useTranslation } from 'react-i18next'
import {
  createWarehouse,
  getWarehouseById,
  editWarehouse,
  getRecycleType
} from '../../../APICalls/warehouseManage'
import { getLocation } from '../../../APICalls/getLocation'

interface AddWarehouseProps {
  drawerOpen: boolean
  handleDrawerClose: () => void
  action?: 'add' | 'edit' | 'delete'
  onSubmitData?: (type: string, id?: number, error?: boolean) => void
  rowId: number
}

interface recyleItem {
  recycTypeId: string
  recycSubtypeId: string
  recycSubtypeCapacity: number
  recycTypeCapacity: number
}

interface recyleSubtyeData {
  recycSubtypeId: string
  recyclableNameEng: string
  recyclableNameSchi: string
  recyclableNameTchi: string
  remark: string
  status: string
  updatedAt: string
  updatedBy: string
}

interface recyleTypeData {
  createdAt: string
  createdBy: string
  description: string
  recycSubtype: recyleSubtyeData[]
  recycTypeId: string
  recyclableNameEng: string
  recyclableNameSchi: string
  recyclableNameTchi: string
  remark: string
  status: string
  updatedAt: string
  updatedBy: string
}

interface recyleTypeOption {
  id: string
  recyclableNameEng: string
  recyclableNameSchi: string
  recyclableNameTchi: string
}

interface recyleSubtypeOption {
  // recycTypeId: string
  // list: recyleSubtyeData[]
  [key: string]: recyleSubtyeData[]
}

interface WarehouseFormData {
  id: number
  warehouseId: number
  warehouseNameTchi: string
  warehouseNameSchi: string
  warehouseNameEng: string
  location: string
  physicalFlg: string | boolean
  contractNo: string[]
  status: string
  warehouseRecyc: recyleItem[]
}

interface nameFields {
  warehouseNameTchi: string
  warehouseNameSchi: string
  warehouseNameEng: string
}

const AddWarehouse: FunctionComponent<AddWarehouseProps> = ({
  drawerOpen,
  handleDrawerClose,
  action = 'add',
  onSubmitData,
  rowId
}) => {
  const { t } = useTranslation()
  const { i18n } = useTranslation()
  const currentLanguage = localStorage.getItem('selectedLanguage') || 'zhhk'

  const [recycleType, setRecycleType] = useState<recyleTypeOption[]>([])
  const [recycleSubType, setSubRecycleType] = useState<recyleSubtypeOption>({})

  useEffect(() => {
    i18n.changeLanguage(currentLanguage)
  }, [i18n, currentLanguage])

  const getRecyleCategory = async () => {
    try {
      const response = await getRecycleType()
      if (response) {
        const dataReycleType: recyleTypeOption[] = response.data.map(
          (item: recyleTypeData) => ({
            id: item.recycTypeId,
            recyclableNameEng: item.recyclableNameEng,
            recyclableNameSchi: item.recyclableNameSchi,
            recyclableNameTchi: item.recyclableNameTchi
          })
        )

        const subTypeMapping: recyleSubtypeOption = {}
        response.data.forEach((item: recyleTypeData) => {
          if (!subTypeMapping[item.recycTypeId]) {
            subTypeMapping[item.recycTypeId as keyof recyleTypeData] =
              item.recycSubtype
          } else {
            subTypeMapping[item.recycTypeId] = [
              ...subTypeMapping[item.recycTypeId],
              ...item.recycSubtype
            ]
          }
        })

        setRecycleType(dataReycleType)
        setSubRecycleType(subTypeMapping)
      }
    } catch (error) {
      console.error(error)
    }
  }

  const resetForm = () => {
    setNamesField({
      warehouseNameTchi: '',
      warehouseNameSchi: '',
      warehouseNameEng: ''
    })
    setContractNum([...initContractNum])
    setPlace('')
    setPysicalLocation(false)
    setStatus(false)
    setRecycleCategory([...initRecyleCategory])
  }

  const getWarehousebyId = async () => {
    try {
      const response = await getWarehouseById(rowId)
      if (response) {
        //mapping data
        const warehouse = response.data
        setNamesField({
          warehouseNameTchi: warehouse.warehouseNameTchi,
          warehouseNameSchi: warehouse.warehouseNameSchi,
          warehouseNameEng: warehouse.warehouseNameEng
        })
        setContractNum([...warehouse.contractNo])
        setPlace(warehouse.location)
        setPysicalLocation(warehouse.physicalFlg)
        setStatus(warehouse.status === 'active')
        setRecycleCategory([...warehouse.warehouseRecyc])
      }
    } catch (error) {
      console.error(error)
    }
  }

  useEffect(() => {
    if (action === 'add') {
      resetForm()
      setTrySubmited(false)
    } else if (action === 'edit' || action === 'delete') {
      getWarehousebyId()
    }

    getRecyleCategory()
  }, [action])

  const name_fields = [
    {
      field: 'warehouseNameTchi',
      label: t('warehouse_page.trad_name'),
      placeholder: t('add_warehouse_page.type_name')
    },
    {
      field: 'warehouseNameSchi',
      label: t('warehouse_page.simp_name'),
      placeholder: t('add_warehouse_page.type_name')
    },
    {
      field: 'warehouseNameEng',
      label: t('warehouse_page.english_name'),
      placeholder: 'Please type a name'
    }
  ]
  const [nameValue, setNamesField] = useState<nameFields>({
    // name fields
    warehouseNameTchi: '',
    warehouseNameSchi: '',
    warehouseNameEng: ''
  })
  const initContractNum: string[] = [''] // contract field
  const [contractNum, setContractNum] = useState<string[]>(initContractNum)
  const [place, setPlace] = useState('') // place field
  const [pysicalLocation, setPysicalLocation] = useState(false) // pysical location field
  const [status, setStatus] = useState(false) // status field
  const initRecyleCategory: recyleItem[] = [
    // recyle category field
    {
      recycTypeId: '',
      recycSubtypeId: '',
      recycSubtypeCapacity: 0,
      recycTypeCapacity: 0
    }
  ]
  const [validation, setValidation] = useState<
    { field: string; error: string }[]
  >([])
  const [trySubmited, setTrySubmited] = useState<boolean>(false)

  const [recycleCategory, setRecycleCategory] =
    useState<recyleItem[]>(initRecyleCategory)

  const [locationGps, setLocationGps] = useState<number[]>([])

  //get location from google map api
  useEffect(() => {
    getLocation(place)
      .then((res) => {
        if (res.data.results) {
          const latitude = res.data.results[0].geometry.location.lat
          const longitude = res.data.results[0].geometry.location.lng

          const newLocation = [latitude, longitude]
          setLocationGps(newLocation)
        }
      })
      .catch((err) => {
        console.log('Fecthing google map api error: ', err)
      })
  }, [place])

  // validation input text
  useEffect(() => {
    const tempV: { field: string; error: string }[] = []

    Object.keys(nameValue).forEach((fieldName) => {
      nameValue[fieldName as keyof nameFields].trim() === '' &&
        tempV.push({
          field: fieldName,
          error: `${t(`add_warehouse_page.${fieldName}`)} is required`
        })
    })

    place.trim() === '' &&
      tempV.push({
        field: 'place',
        error: `${t(`add_warehouse_page.place`)} is required`
      })

    contractNum.some((value) => value.trim() === '') &&
      tempV.push({
        field: 'contractNum',
        error: `${t(`add_warehouse_page.contractNum`)} is required`
      })

    const isRecyleUnselected = recycleCategory.every((item) => {
      return (
        item.recycTypeId.trim() !== '' &&
        item.recycSubtypeId.trim() !== '' &&
        item.recycSubtypeCapacity === 0
      )
    })

    console.log('isRecyleUnselected', isRecyleUnselected)

    isRecyleUnselected &&
      tempV.push({
        field: 'warehouseRecyc',
        error: `${t(`add_warehouse_page.recyclable_field`)} is required`
      })

    setValidation(tempV)
    console.log(tempV)
  }, [nameValue, place, contractNum, recycleCategory])

  const checkString = (s: string) => {
    if (!trySubmited) {
      //before first submit, don't check the validation
      return false
    }
    return s == ''
  }

  const checkNumber = (s: number) => {
    if (!trySubmited) {
      //before first submit, don't check the validation
      return false
    }
    return s == 0
  }

  //handle methods
  const handleNameFields = (fieldName: string, value: string) => {
    setNamesField({ ...nameValue, [fieldName]: value })
  }

  const handlePlaceChange = (fieldName: string, value: string) => {
    setPlace(value)
  }

  const handleRemoveContact = (indexToRemove: number) => {
    const updatedContractNum = contractNum.filter(
      (_, index) => index !== indexToRemove
    )
    setContractNum(updatedContractNum)
  }

  const handleAddContact = () => {
    const updatedContractNum = [...contractNum, '']
    setContractNum(updatedContractNum)
  }

  const handleContactonChange = (
    event: React.ChangeEvent<HTMLInputElement>,
    index: number
  ) => {
    const updatedContacts = [...contractNum]
    updatedContacts[index] = event.target.value
    setContractNum(updatedContacts)
  }

  const handleAddRecycleCategory = () => {
    const updatedRecycleCategory = [
      ...recycleCategory,
      {
        recycTypeId: '',
        recycSubtypeId: '',
        recycSubtypeCapacity: 0,
        recycTypeCapacity: 0
      }
    ]
    setRecycleCategory(updatedRecycleCategory)
  }

  const handleRemoveReycleCategory = (indexToRemove: number) => {
    const updatedRecycleCategory = recycleCategory.filter(
      (_, index) => index !== indexToRemove
    )
    setRecycleCategory(updatedRecycleCategory)
  }

  const handleChangeRecycleType = (
    event: SelectChangeEvent<string>,
    index: number
  ) => {
    const updatedRecycleCategory = [...recycleCategory]
    updatedRecycleCategory[index].recycTypeId = event.target.value
    setRecycleCategory(updatedRecycleCategory)
    // setSelectedSubType(
    //   recycleSubType.find((item) => {
    //     return item.recycTypeId == event.target.value
    //   })
    // )
  }

  const handleChangeSubtype = (
    event: SelectChangeEvent<string>,
    index: number
  ) => {
    const updatedRecycleCategory = [...recycleCategory]
    updatedRecycleCategory[index].recycSubtypeId = event.target.value as string
    setRecycleCategory(updatedRecycleCategory)
  }

  const handleChangeWeight = (
    event: React.ChangeEvent<HTMLInputElement>,
    index: number
  ) => {
    const updatedRecycleCategory = [...recycleCategory]
    updatedRecycleCategory[index].recycSubtypeCapacity = Number(
      event.target.value
    )
    setRecycleCategory(updatedRecycleCategory)
  }

  const createWareHouseData = async (addWarehouseForm: any) => {
    try {
      const response = await createWarehouse(addWarehouseForm)
      if (response) {
        console.log('added', response)
      }
    } catch (error) {
      console.error(error)
    }
  }

  const editWarehouseData = async (addWarehouseForm: any) => {
    try {
      const response = await editWarehouse(addWarehouseForm, rowId)
      if (response) {
        console.log('edited', response)
      }
    } catch (error) {
      console.error(error)
    }
  }

  //submit data
  const handleSubmit = async () => {
    let statusWarehouse = status ? 'ACTIVE' : 'INACTIVE'
    if (action == 'delete') {
      statusWarehouse = 'DELETED'
    }

    const addWarehouseForm = {
      warehouseNameTchi: nameValue.warehouseNameTchi,
      warehouseNameSchi: nameValue.warehouseNameSchi,
      warehouseNameEng: nameValue.warehouseNameEng,
      location: place,
      locationGps: locationGps,
      physicalFlg: pysicalLocation,
      contractNo: contractNum,
      status: statusWarehouse,
      createdBy: 'string',
      updatedBy: 'string',
      warehouseRecyc: recycleCategory
    }

    const isError = validation.length == 0

    if (validation.length == 0) {
      action === 'add'
        ? //MOVE API CAL TO PARENT DATA, ONLY PARSING DATA HERE
          createWareHouseData(addWarehouseForm)
        : editWarehouseData(addWarehouseForm)

      if (
        onSubmitData &&
        typeof onSubmitData === 'function' &&
        typeof rowId === 'number'
      ) {
        onSubmitData(action, rowId, !isError)
      }
      console.log(addWarehouseForm)
      setValidation([])
    } else {
      console.log(validation)
      setTrySubmited(true)
    }
  }

  const getFormErrorMsg = () => {
    const errorFields = validation.map((item) =>
      t(`add_warehouse_page.${item.field}`)
    )

    if (errorFields.length > 0) {
      return `${errorFields.join(', ')} ${
        errorFields.length > 1 ? 'are' : 'is'
      } required`
    }

    return ''
  }

  return (
    <div className="add-warehouse">
      <RightOverlayForm
        open={drawerOpen}
        onClose={handleDrawerClose}
        anchor={'right'}
        action={action}
        headerProps={{
          title: t('top_menu.add_new'),
          subTitle: t('top_menu.workshop'),
          submitText: t('add_warehouse_page.save'),
          cancelText: t('add_warehouse_page.delete'),
          onCloseHeader: handleDrawerClose,
          onSubmit: handleSubmit,
          onDelete: handleSubmit
        }}
      >
        {/* form warehouse */}
        <div
          style={{ borderTop: '1px solid lightgrey' }}
          className="form-container"
        >
          {validation.length > 0 && trySubmited && (
            <Grid item className="pl-6 pt-3">
              <FormHelperText error={true}>{getFormErrorMsg()}</FormHelperText>
            </Grid>
          )}
          <div className="self-stretch flex flex-col items-start justify-start pt-[25px] px-[25px] pb-[75px] gap-[25px] text-left text-smi text-grey-middle">
            {name_fields.map((item, index) => (
              <div
                key={index + 'name'}
                className="self-stretch flex flex-col items-start justify-center gap-2"
              >
                <LabelField label={item.label} mandatory={true} />
                <FormControl fullWidth variant="standard">
                  <TextField
                    value={nameValue[item.field as keyof nameFields]}
                    onChange={(e) =>
                      handleNameFields(item.field, e.target.value)
                    }
                    fullWidth
                    placeholder={item.placeholder}
                    id={`fullWidth-${index}`}
                    InputLabelProps={{ shrink: false }}
                    InputProps={{
                      sx: styles.textField
                    }}
                    sx={styles.inputState}
                    disabled={action === 'delete'}
                    error={checkString(
                      nameValue[item.field as keyof nameFields]
                    )}
                  />
                </FormControl>
              </div>
            ))}
            {/* <Switcher  Physical location/> */}
            <div className="self-stretch flex flex-col items-start justify-start gap-[8px] text-center">
              <LabelField
                label={t('warehouse_page.location')}
                mandatory={true}
              />
              <Switcher
                onText={t('add_warehouse_page.yes')}
                offText={t('add_warehouse_page.no')}
                disabled={action === 'delete'}
                defaultValue={pysicalLocation}
                setState={(newValue) => {
                  setPysicalLocation(newValue)
                }}
              />
            </div>
            {/* contact number */}
            <div className="self-stretch flex flex-col items-start justify-start gap-[8px] text-center text-mini text-black">
              <LabelField label={t('col.contractNo')} mandatory={true} />
              <div className="self-stretch flex flex-col items-start justify-start">
                <div className="self-stretch ">
                  {contractNum.map((contact, index) => (
                    <div
                      className="flex flex-row items-center justify-start gap-[8px] mb-2"
                      key={contact + index}
                    >
                      <FormControl fullWidth variant="standard">
                        <TextField
                          value={contractNum[index]}
                          fullWidth
                          placeholder={t('col.enterNo')}
                          id="fullWidth"
                          InputLabelProps={{
                            shrink: false
                          }}
                          InputProps={{
                            sx: styles.textField
                          }}
                          sx={styles.inputState}
                          disabled={action === 'delete'}
                          onChange={(
                            event: React.ChangeEvent<
                              HTMLInputElement | HTMLTextAreaElement
                            >
                          ) => {
                            handleContactonChange(
                              event as React.ChangeEvent<HTMLInputElement>,
                              index
                            )
                          }}
                          error={checkString(contractNum[index])}
                        />
                      </FormControl>
                      {index === contractNum.length - 1 ? (
                        <ADD_CIRCLE_ICON
                          fontSize="small"
                          className="text-green-primary cursor-pointer"
                          onClick={handleAddContact}
                        />
                      ) : (
                        index !== contractNum.length - 1 && (
                          <REMOVE_CIRCLE_ICON
                            fontSize="small"
                            className={`text-grey-light ${
                              contractNum.length === 1
                                ? 'cursor-not-allowed'
                                : 'cursor-pointer'
                            } `}
                            onClick={() => handleRemoveContact(index)}
                          />
                        )
                      )}
                    </div>
                  ))}
                </div>
              </div>
            </div>
            {/* Adress field */}
            <div className="self-stretch flex flex-col items-start justify-center gap-[8px]">
              <LabelField label={t('warehouse_page.place')} mandatory={true} />
              <div className="self-stretch flex flex-col items-start justify-center gap-[8px] text-center text-mini text-grey-darker">
                <FormControl fullWidth variant="standard">
                  <TextField
                    value={place}
                    onChange={(e) => handlePlaceChange('place', e.target.value)}
                    fullWidth
                    multiline
                    placeholder={t('add_warehouse_page.place_placeholders')}
                    rows={4}
                    InputLabelProps={{ shrink: false }}
                    InputProps={{
                      sx: styles.textArea
                    }}
                    sx={styles.inputState}
                    disabled={action === 'delete'}
                    error={checkString(place)}
                  />
                </FormControl>
              </div>
            </div>
            {/* <Switcher status/> */}
            <div className="self-stretch flex flex-col items-start justify-start gap-[8px] text-center">
              <LabelField label={t('warehouse_page.status')} mandatory={true} />
              <Switcher
                onText={t('add_warehouse_page.open')}
                offText={t('add_warehouse_page.close')}
                disabled={action === 'delete'}
                defaultValue={status}
                setState={(newValue) => {
                  setStatus(newValue)
                }}
              />
            </div>
            {/* Recyle category */}
            <div className="self-stretch flex flex-col items-start justify-start gap-[8px]">
              <LabelField
                label={t('warehouse_page.recyclable_subcategories')}
                mandatory={true}
              />
              <div className="self-stretch flex flex-col items-start justify-start gap-[8px] text-mini">
                <div className="self-stretch overflow-hidden flex flex-row items-center justify-start gap-[8px]">
                  <div className="w-full ">
                    {recycleCategory.map((item, index) => (
                      <div
                        className="flex justify-center items-center gap-2 mb-2"
                        key={index + 'recyle'}
                      >
                        <FormControl sx={{ m: 1, width: '100%' }}>
                          <Select
                            value={item.recycTypeId}
                            onChange={(event: SelectChangeEvent<string>) =>
                              handleChangeRecycleType(event, index)
                            }
                            displayEmpty
                            disabled={action === 'delete'}
                            inputProps={{
                              'aria-label': 'Without label'
                            }}
                            sx={{
                              borderRadius: '12px' // Adjust the value as needed
                            }}
                            error={checkString(item.recycTypeId)}
                          >
                            <MenuItem value="">
                              <em>-</em>
                            </MenuItem>
                            {recycleType.map((item, index) => (
                              <MenuItem value={item.id} key={index}>
                                {currentLanguage === 'zhhk'
                                  ? item.recyclableNameTchi
                                  : currentLanguage === 'zhch'
                                  ? item.recyclableNameSchi
                                  : item.recyclableNameEng}
                              </MenuItem>
                            ))}
                          </Select>
                        </FormControl>
                        <FormControl sx={{ m: 1, width: '100%' }}>
                          <Select
                            value={item.recycSubtypeId}
                            onChange={(event: SelectChangeEvent<string>) =>
                              handleChangeSubtype(event, index)
                            }
                            displayEmpty
                            disabled={action === 'delete'}
                            inputProps={{
                              'aria-label': 'Without label'
                            }}
                            sx={{
                              borderRadius: '12px'
                            }}
                            error={checkString(item.recycSubtypeId)}
                          >
                            <MenuItem value="">
                              <em>-</em>
                            </MenuItem>
                            {recycleSubType[item.recycTypeId]?.map(
                              (item, index) => (
                                <MenuItem
                                  value={item.recycSubtypeId}
                                  key={index}
                                >
                                  {currentLanguage === 'zhhk'
                                    ? item.recyclableNameTchi
                                    : currentLanguage === 'zhch'
                                    ? item.recyclableNameSchi
                                    : item.recyclableNameEng}
                                </MenuItem>
                              )
                            )}
                          </Select>
                        </FormControl>
                        <FormControl fullWidth variant="standard">
                          <OutlinedInput
                            value={item.recycSubtypeCapacity}
                            type="number"
                            onChange={(
                              event: React.ChangeEvent<
                                HTMLInputElement | HTMLTextAreaElement
                              >
                            ) =>
                              handleChangeWeight(
                                event as React.ChangeEvent<HTMLInputElement>,
                                index
                              )
                            }
                            fullWidth
                            id="outlined-adornment-weight"
                            placeholder={t('add_warehouse_page.weight')}
                            endAdornment={
                              <InputAdornment position="end">kg</InputAdornment>
                            }
                            aria-describedby="outlined-weight-helper-text"
                            inputProps={{
                              'aria-label': 'weight',
                              sx: styles.textField
                            }}
                            sx={styles.textField}
                            disabled={action === 'delete'}
                            error={checkNumber(item.recycSubtypeCapacity)}
                          />
                        </FormControl>
                        {index === recycleCategory.length - 1 ? (
                          <ADD_CIRCLE_ICON
                            fontSize="small"
                            className="text-green-primary cursor-pointer"
                            onClick={handleAddRecycleCategory}
                          />
                        ) : (
                          index !== recycleCategory.length - 1 && (
                            <REMOVE_CIRCLE_ICON
                              fontSize="small"
                              className={`text-grey-light ${
                                contractNum.length === 1
                                  ? 'cursor-not-allowed'
                                  : 'cursor-pointer'
                              } `}
                              onClick={() => handleRemoveReycleCategory(index)}
                            />
                          )
                        )}
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </RightOverlayForm>
    </div>
  )
}

let styles = {
  textField: {
    borderRadius: '10px',
    fontWeight: '500',
    '& .MuiOutlinedInput-input': {
      padding: '15px 20px',
      margin: 0
    }
  },
  textArea: {
    borderRadius: '10px',
    fontWeight: '500',
    '& .MuiOutlinedInput-input': {
      padding: 0,
      margin: 0
    }
  },
  inputState: {
    '& .MuiOutlinedInput-root': {
      margin: 0,
      '&:not(.Mui-disabled):hover fieldset': {
        borderColor: '#79CA25'
      },
      '&.Mui-focused fieldset': {
        borderColor: '#79CA25'
      }
    }
  },
  dropDown: {
    '& .MuiOutlinedInput-root-MuiSelect-root': {
      borderRadius: '10px'
    }
  }
}

export default AddWarehouse
